// Main Invoice Model based on InvoicesDoc-v1.0.10.xsd

// Import simple types
import {
  AmountType,
  CountryType,
  CurrencyType,
  ExchangeRateType,
  FeesType,
  FuelCodes,
  InvoiceDetailType,
  InvoiceType,
  InvoiceVariationType,
  OtherTaxesType,
  PaymentMethod, // Imported for use in PaymentMethodDetailType definition
  QuantityType,
  SpecialInvoiceCategoryType,
  StampDutyType,
  VatExemptionType,
  VatType,
  WithheldType
} from './simple-types.model';

// Import complex types defined in other files
import { IncomeClassificationType } from './incomeClassification.model';
import { ExpensesClassificationType } from './expensesClassification.model';
import { PaymentMethodDetailType } from './paymentMethods.model';

// Types defined locally as they are complex types specific to InvoicesDoc-v1.0.xsd

export interface AadeBookInvoiceDocType {
  InvoicesDoc: {
    invoice: AadeBookInvoiceType[]; // Array (1..unbounded)
  };
}

/**
 * Represents the main AADE Book Invoice structure.
 * Corresponds to <inv:AadeBookInvoiceType>
 */
export interface AadeBookInvoiceType {
  /** Invoice Identifier (calculated by service) */
  uid?: string; // xs:string, Optional
  /** Unique Invoice Registration Number (MARK) (assigned by service) */
  mark?: number; // xs:long, Optional
  /** MARK of the cancellation invoice, if this invoice was cancelled */
  cancelledByMark?: number; // xs:long, Optional
  /** Provider Authentication String (assigned by service if submitted by provider) */
  authenticationCode?: string; // xs:string, Optional
  /** Indicator for transmission failure (1, 2 for provider; 3 for ERP) */
  transmissionFailure?: 1 | 2 | 3; // xs:byte, Optional
  /** Issuer details */
  issuer?: PartyType; // Optional
  /** Counterpart (Recipient) details */
  counterpart?: PartyType; // Optional
  /** Invoice header details */
  invoiceHeader: InvoiceHeaderType;
  /** Payment methods used */
  paymentMethods?: PaymentMethods; // Optional wrapper element
  /** Invoice line item details */
  invoiceDetails: InvoiceRowType[]; // Array (1..unbounded)
  /** Tax totals applied to the whole invoice (excluding VAT) */
  taxesTotals?: TaxesTotals; // Optional wrapper element
  /** Summary of the invoice values */
  invoiceSummary: InvoiceSummaryType;
  /** URL for the QR Code (generated by service) */
  qrCodeUrl?: string; // xs:string, Optional
  /** Additional transport details (e.g., change of means) */
  otherTransportDetails?: TransportDetailType[]; // Optional Array (0..unbounded)
}

/**
 * Represents the invoice header.
 * Corresponds to <inv:InvoiceHeaderType>
 */
export interface InvoiceHeaderType {
  /** Invoice Series */
  series: string; // xs:string, MaxLength 50
  /** Invoice Sequential Number (AA) */
  aa: string; // xs:string, MaxLength 50
  /** Invoice Issue Date */
  issueDate: Date; // xs:date
  /** Invoice Type */
  invoiceType: InvoiceType;
  /** VAT Payment Suspension indicator */
  vatPaymentSuspension?: boolean; // xs:boolean, Optional
  /** Currency code (ISO 4217) */
  currency?: CurrencyType; // Optional
  /** Exchange rate relative to EUR (if currency is not EUR) */
  exchangeRate?: ExchangeRateType; // Optional
  /** List of MARKs of correlated invoices */
  correlatedInvoices?: number[]; // Optional Array (0..unbounded) of xs:long
  /** Self-Pricing (Self-Billing) indicator */
  selfPricing?: boolean; // xs:boolean, Optional
  /** Dispatch Start Date */
  dispatchDate?: Date; // xs:date, Optional
  /** Dispatch Start Time */
  dispatchTime?: Date; // xs:time, Optional (Using Date for time in TS)
  /** Transport Vehicle Number */
  vehicleNumber?: string; // xs:string, Optional, MaxLength 150
  /** Movement Purpose Code */
  movePurpose?: number; // xs:int, Optional (1-19)
  /** Fuel invoice indicator */
  fuelInvoice?: boolean; // xs:boolean, Optional
  /** Special Invoice Category Code */
  specialInvoiceCategory?: SpecialInvoiceCategoryType; // Optional
  /** Invoice Variation (Deviation) Type Code */
  invoiceVariationType?: InvoiceVariationType; // Optional
  /** Other correlated entities involved */
  otherCorrelatedEntities?: EntityType[]; // Optional Array (0..unbounded)
  /** Additional general delivery details */
  otherDeliveryNoteHeader?: OtherDeliveryNoteHeaderType; // Optional
  /** Indicates if the invoice also serves as a delivery note */
  isDeliveryNote?: boolean; // xs:boolean, Optional
  /** Title for 'Other' movement purpose (if movePurpose = 19) */
  otherMovePurposeTitle?: string; // xs:string, Optional, MaxLength 150
  /** Third-Party Collection indicator (for types 8.4, 8.5) */
  thirdPartyCollection?: boolean; // xs:boolean, Optional
  /** Multiple Connected MARKs (e.g., for consolidating restaurant orders) */
  multipleConnectedMarks?: number[]; // Optional Array (0..unbounded) of xs:long
  /** Table Sequential Number (AA) (for type 8.6) */
  tableAA?: string; // xs:string, Optional, MaxLength 50
  /** Indicator for total cancellation of Order Slips (for type 8.6) */
  totalCancelDeliveryOrders?: boolean; // xs:boolean, Optional
}

/**
 * Represents a single line item on the invoice.
 * Corresponds to <inv:InvoiceRowType>
 */
export interface InvoiceRowType {
  /** Line Sequential Number (AA) */
  lineNumber: number; // xs:int, MinInclusive 1
  /** Line Type Code (e.g., Fee, Other Tax) */
  recType?: RecType; // xs:int, Optional (1-7)
  /** TARIC Code (for delivery notes) */
  TaricNo?: string; // xs:string, Optional, Length 10
  /** Item Code (for delivery notes) */
  itemCode?: string; // xs:string, Optional, MaxLength 50
  /** Item Description (for delivery notes, tax-free) */
  itemDescr?: string; // xs:string, Optional, MaxLength 300
  /** Fuel Code (if fuelInvoice = true) */
  fuelCode?: FuelCodes; // Optional
  /** Quantity */
  quantity?: number; // xs:decimal, Optional, MinExclusive 0
  /** Measurement Unit Code */
  measurementUnit?: QuantityType; // Optional
  /** Special Line Marking (Third Party Sales) */
  invoiceDetailType?: InvoiceDetailType; // Optional
  /** Net Value of the line */
  netValue: AmountType;
  /** VAT Category Code */
  vatCategory: VatType;
  /** VAT Amount for the line */
  vatAmount: AmountType;
  /** VAT Exemption Reason Code (if vatCategory is 0% type) */
  vatExemptionCategory?: VatExemptionType; // Optional
  /** Declaration of Activity Details (POL 1177/2018 Art. 27) */
  dienergia?: ShipType; // Optional
  /** VAT Discount Right indicator */
  discountOption?: boolean; // xs:boolean, Optional
  /** Withheld Tax Amount */
  withheldAmount?: AmountType; // Optional
  /** Withheld Tax Rate Category Code */
  withheldPercentCategory?: WithheldType; // Optional
  /** Stamp Duty Amount */
  stampDutyAmount?: AmountType; // Optional
  /** Stamp Duty Rate Category Code */
  stampDutyPercentCategory?: StampDutyType; // Optional
  /** Fees Amount */
  feesAmount?: AmountType; // Optional
  /** Fees Rate Category Code */
  feesPercentCategory?: FeesType; // Optional
  /** Other Taxes Rate Category Code */
  otherTaxesPercentCategory?: OtherTaxesType; // Optional
  /** Other Taxes Amount */
  otherTaxesAmount?: AmountType; // Optional
  /** Deductions Amount */
  deductionsAmount?: AmountType; // Optional
  /** Comments specific to this line */
  lineComments?: string; // xs:string, Optional, MaxLength 150
  /** Income classifications for this line */
  incomeClassification?: IncomeClassificationType[]; // Optional Array (0..unbounded), Import from incomeClassification.model
  /** Expense classifications for this line */
  expensesClassification?: ExpensesClassificationType[]; // Optional Array (0..unbounded), Import from expensesClassification.model
  /** Quantity at 15 degrees Celsius (for fuel) */
  quantity15?: number; // xs:decimal, Optional, MinExclusive 0
  /** Quantity for 'Other' measurement unit (if measurementUnit = 7) */
  otherMeasurementUnitQuantity?: number; // xs:int, Optional
  /** Title for 'Other' measurement unit (if measurementUnit = 7) */
  otherMeasurementUnitTitle?: string; // xs:string, Optional, MaxLength 150
  /** Indicator of non-participation in VAT (revenue â€“ outflows) */
  notVAT195?: boolean; // xs:boolean, Optional
}

/**
 * Represents the summary section of the invoice.
 * Corresponds to <inv:InvoiceSummaryType>
 */
export interface InvoiceSummaryType {
  /** Total Net Value of the invoice */
  totalNetValue: AmountType;
  /** Total VAT Amount of the invoice */
  totalVatAmount: AmountType;
  /** Total Withheld Tax Amount */
  totalWithheldAmount: AmountType;
  /** Total Fees Amount */
  totalFeesAmount: AmountType;
  /** Total Stamp Duty Amount */
  totalStampDutyAmount: AmountType; // Corrected name from XSD
  /** Total Other Taxes Amount */
  totalOtherTaxesAmount: AmountType;
  /** Total Deductions Amount */
  totalDeductionsAmount: AmountType;
  /** Total Gross Value of the invoice */
  totalGrossValue: AmountType;
  /** Aggregated income classifications */
  incomeClassification?: IncomeClassificationType[]; // Optional Array (0..unbounded), Import from incomeClassification.model
  /** Aggregated expense classifications */
  expensesClassification?: ExpensesClassificationType[]; // Optional Array (0..unbounded), Import from expensesClassification.model
}

/**
 * Represents details of a party (issuer or counterpart).
 * Corresponds to <inv:PartyType>
 */
export interface PartyType {
  /** VAT Number */
  vatNumber: string; // xs:string, MaxLength 30
  /** Country Code (ISO 3166) */
  country: CountryType;
  /** Branch Number (0 for headquarters or no branch) */
  branch: number; // xs:int
  /** Name (only for non-GR entities) */
  name?: string; // xs:string, Optional, MaxLength 200
  /** Address details (only for non-GR entities or loading/delivery) */
  address?: AddressType; // Optional
  /** Official Document Number (e.g., passport for Tax-free) */
  documentIdNo?: string; // xs:string, Optional, MaxLength 100
  /** Electricity Supply Account Number (for fuel invoices) */
  supplyAccountNo?: string; // xs:string, Optional, MaxLength 100
  /** Country Code of Official Document Issue (for Tax-free) */
  countryDocumentId?: CountryType; // Optional
}

/**
 * Represents address details.
 * Corresponds to <inv:AddressType>
 */
export interface AddressType {
  /** Street Name */
  street?: string; // xs:string, Optional, MaxLength 150
  /** Street Number */
  number?: string; // xs:string, Optional
  /** Postal Code */
  postalCode: string; // xs:string
  /** City Name */
  city: string; // xs:string, MaxLength 150
}

/**
 * Represents details related to POL 1177/2018 Art. 27.
 * Corresponds to <inv:ShipType>
 */
export interface ShipType {
  /** Activity Declaration Number */
  applicationId: string; // xs:string
  /** Declaration Date */
  applicationDate: Date; // xs:date
  /** Tax Office (DOY) of Declaration */
  doy?: string; // xs:string, Optional, MaxLength 150
  /** Ship Details identifier */
  shipId: string; // xs:string
}

/**
 * Represents tax totals applied at the invoice level.
 * Corresponds to <inv:TaxTotalsType>
 */
export interface TaxTotalsType {
  /** Tax Type Code (1: Withheld, 2: Fees, 3: Other, 4: StampDuty, 5: Deductions) */
  taxType: 1 | 2 | 3 | 4 | 5; // xs:byte
  /** Tax Category Code (depends on taxType) */
  taxCategory?: number; // xs:int, Optional, MinInclusive 1
  /** Value upon which the tax is calculated */
  underlyingValue?: AmountType; // Optional
  /** Tax Amount */
  taxAmount: AmountType;
  /** Line sequential number for this tax total entry */
  id?: number; // xs:byte, Optional
}

/**
 * Represents details of other correlated entities.
 * Corresponds to <inv:EntityType>
 */
export interface EntityType {
  /** Entity Category Code (1-6) */
  type: 1 | 2 | 3 | 4 | 5 | 6; // xs:int
  /** Details of the entity */
  entityData: PartyType;
}

/**
 * Represents additional transport details (e.g., vehicle change).
 * Corresponds to <inv:TransportDetailType>
 */
export interface TransportDetailType {
  /** Vehicle Number */
  vehicleNumber: string; // xs:string, MaxLength 50
}

/**
 * Represents additional general delivery details header.
 * Corresponds to <inv:OtherDeliveryNoteHeaderType>
 */
export interface OtherDeliveryNoteHeaderType {
  /** Loading Address details */
  loadingAddress: AddressType;
  /** Delivery Address details */
  deliveryAddress: AddressType;
  /** Issuer's branch where shipping starts (if different from header) */
  startShippingBranch?: number; // xs:int, Optional
  /** Recipient's branch where shipping completes (if different from header) */
  completeShippingBranch?: number; // xs:int, Optional
}

/**
 * Represents the signature from an E-Invoicing Provider for payments.
 * Corresponds to <inv:ProviderSignatureType>
 */
export interface ProviderSignatureType {
  /** Provider's ID (YPAHES Decision Number) */
  SigningAuthor: string; // xs:string, MaxLength 20
  /** Provider generated signature */
  Signature: string; // xs:string
}

/**
 * Represents the token/signature from an ECR (Fiscal Device) for payments via ERP.
 * Corresponds to <inv:ECRTokenType>
 */
export interface ECRTokenType {
  /** ECR ID (Fiscal Mechanism Registry Number) */
  SigningAuthor: string; // xs:string, MaxLength 15
  /** Unique 6-digit session/transaction code */
  SessionNumber: string; // xs:string, Length 6
  /** Generated Signature */
  // Signature: string; // Missing from XSD but expected based on context/docs - keep commented if strictly following XSD
}

// Wrapper types corresponding to optional sequence elements in AadeBookInvoiceType
export interface PaymentMethods {
  paymentMethodDetails: PaymentMethodDetailType[]; // Array (1..unbounded)
}

export interface TaxesTotals {
  taxes: TaxTotalsType[]; // Array (1..unbounded)
}

/**
 * Enum for invoice row types (recType) with their corresponding codes and descriptions
 */
export enum RecType {
  /** Special Line for Withheld Taxes (Inactive - for future use) */
  SPECIAL_WITHHELD_TAXES = 1,
  /** Fee Line with VAT */
  FEE_WITH_VAT = 2,
  /** Other Taxes Line with VAT */
  OTHER_TAXES_WITH_VAT = 3,
  /** Special Line for Stamp Duty (Inactive - for future use) */
  SPECIAL_STAMP_DUTY = 4,
  /** Special Line for Deductions (Inactive - for future use) */
  SPECIAL_DEDUCTIONS = 5,
  /** Gift Voucher */
  GIFT_VOUCHER = 6,
  /** Negative value sign (Valid only for invoices 17.3, 17.4, 17.5, and 17.6) */
  NEGATIVE_VALUE_SIGN = 7
}
